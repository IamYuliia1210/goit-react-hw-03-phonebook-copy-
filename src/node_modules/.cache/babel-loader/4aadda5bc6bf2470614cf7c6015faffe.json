{"ast":null,"code":"var _jsxFileName = \"D:\\\\go.it-homework\\\\react\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.js\";\nimport * as yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  name: yup.string().matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name cannot contain numbers').required(),\n  number: yup.string().min(6, 'Too short  phone number').max(12, 'Too long phone number').matches(/^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/, 'Invalid phone number format').required(),\n  contacts: yup.array()\n});\nconst initialValues = {\n  name: '',\n  number: ''\n};\nexport const ContactForm = () => {\n  const handleSumbit = (values, actions) => {\n    console.log(values);\n    console.log(actions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: handleSumbit,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Name\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"name\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"tel\",\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"tel\",\n          name: \"number\",\n          placeholder: \"Number\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"number\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = ContactForm;\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["yup","Formik","Form","Field","ErrorMessage","jsxDEV","_jsxDEV","schema","object","shape","name","string","matches","required","number","min","max","contacts","array","initialValues","ContactForm","handleSumbit","values","actions","console","log","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","title","component","_c","$RefreshReg$"],"sources":["D:/go.it-homework/react/goit-react-hw-02-phonebook/src/components/ContactForm/ContactForm.js"],"sourcesContent":["import * as yup from 'yup';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name cannot contain numbers')\r\n    .required(),\r\n  number: yup\r\n    .string()\r\n    .min(6, 'Too short  phone number')\r\n    .max(12, 'Too long phone number')\r\n    .matches(\r\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\r\n      'Invalid phone number format'\r\n    )\r\n    .required(),\r\n  contacts: yup.array(),\r\n});\r\n\r\nconst initialValues = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nexport const ContactForm = () => {\r\n  const handleSumbit = (values, actions) => {\r\n    console.log(values);\r\n    console.log(actions);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik initialValues={initialValues} onSubmit={handleSumbit}>\r\n        <Form>\r\n          <label htmlFor=\"name\">Name</label>\r\n          <Field\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"Name\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n          />\r\n          <ErrorMessage name=\"name\" component=\"div\" />\r\n          <label htmlFor=\"tel\">Number</label>\r\n          <Field\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"Number\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n          />\r\n          <ErrorMessage name=\"number\" component=\"div\" />\r\n          <button type=\"submit\">Add contact</button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}